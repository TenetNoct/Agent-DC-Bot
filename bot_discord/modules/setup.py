# setup.py
# Sistema de configura√ß√£o interativa via Discord

import discord
from discord.ext import commands
import asyncio
import json
import os
import logging
from typing import Dict, List, Any, Optional, Union, Callable

# Configura√ß√£o do logger
logger = logging.getLogger(__name__)

class SetupWizard:
    """Assistente de configura√ß√£o interativa para o bot via Discord"""
    
    def __init__(self, bot, config, command_handler):
        self.bot = bot
        self.config = config
        self.command_handler = command_handler
        self.active_setups = {}
        self.timeout = 120  # Tempo em segundos para timeout da configura√ß√£o
        
        # Etapas de configura√ß√£o dispon√≠veis
        self.setup_steps = [
            {
                "name": "bot_name_keyword",
                "title": "Nome do Bot e Palavra-Chave",
                "description": "Define o nome do bot e a palavra-chave que servir√° como gatilho para respostas.",
                "handler": self._setup_bot_name_keyword
            },
            {
                "name": "command_prefix",
                "title": "Prefixo de Comandos",
                "description": "Permite alterar o prefixo usado para comandos.",
                "handler": self._setup_command_prefix
            },
            {
                "name": "memory_settings",
                "title": "Mem√≥ria Permanente",
                "description": "Configura o armazenamento de mensagens importantes.",
                "handler": self._setup_memory_settings
            },
            {
                "name": "search_settings",
                "title": "Sistema de Busca",
                "description": "Configura o sistema de busca headless (Selenium/Playwright).",
                "handler": self._setup_search_settings
            },
            {
                "name": "moderation_settings",
                "title": "Modera√ß√£o Autom√°tica",
                "description": "Configura filtros para spam, flood e palavras proibidas.",
                "handler": self._setup_moderation_settings
            },
            {
                "name": "bot_personality",
                "title": "Personalidade do Bot",
                "description": "Escolha entre formal, casual e humor√≠stico.",
                "handler": self._setup_bot_personality
            },
            {
                "name": "notification_settings",
                "title": "Notifica√ß√µes",
                "description": "Configura notifica√ß√µes via Telegram ou Webhook.",
                "handler": self._setup_notification_settings
            }
        ]
    
    async def start_setup(self, ctx):
        """Inicia o assistente de configura√ß√£o interativo"""
        # Verifica se o usu√°rio tem permiss√µes de administrador
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("‚ùå Voc√™ precisa ter permiss√µes de administrador para usar este comando.")
            return
        
        # Verifica se j√° existe uma configura√ß√£o ativa para este canal
        if ctx.channel.id in self.active_setups:
            await ctx.send("‚ö†Ô∏è J√° existe uma configura√ß√£o em andamento neste canal. Conclua-a ou aguarde o timeout.")
            return
        
        # Registra esta configura√ß√£o como ativa
        self.active_setups[ctx.channel.id] = {
            "user_id": ctx.author.id,
            "step": 0,
            "config": {}
        }
        
        # Envia mensagem de boas-vindas
        welcome_embed = discord.Embed(
            title="üîß Assistente de Configura√ß√£o do Bot",
            description="Bem-vindo ao assistente de configura√ß√£o interativo! Vou gui√°-lo atrav√©s das etapas para configurar o bot.",
            color=discord.Color.blue()
        )
        welcome_embed.add_field(
            name="‚ÑπÔ∏è Instru√ß√µes",
            value="- Responda √†s perguntas digitando no chat\n- Digite `cancelar` a qualquer momento para sair\n- Digite `pular` para usar as configura√ß√µes padr√£o\n- O assistente expirar√° ap√≥s 2 minutos de inatividade",
            inline=False
        )
        welcome_embed.add_field(
            name="üìã Etapas de Configura√ß√£o",
            value="\n".join([f"{i+1}. {step['title']}" for i, step in enumerate(self.setup_steps)]),
            inline=False
        )
        
        await ctx.send(embed=welcome_embed)
        
        # Inicia a primeira etapa
        await self._process_next_step(ctx)
        
    async def _process_next_step(self, ctx):
        """Processa a pr√≥xima etapa da configura√ß√£o"""
        # Obt√©m os dados da configura√ß√£o atual
        setup_data = self.active_setups.get(ctx.channel.id)
        if not setup_data:
            return
        
        # Verifica se todas as etapas foram conclu√≠das
        if setup_data["step"] >= len(self.setup_steps):
            await self._finish_setup(ctx)
            return
        
        # Obt√©m a etapa atual
        current_step = self.setup_steps[setup_data["step"]]
        
        # Chama o handler da etapa atual
        await current_step["handler"](ctx)
    
    async def _wait_for_response(self, ctx, timeout=None):
        """Aguarda uma resposta do usu√°rio"""
        if timeout is None:
            timeout = self.timeout
            
        setup_data = self.active_setups.get(ctx.channel.id)
        if not setup_data:
            return None
            
        def check(message):
            # Verifica se a mensagem √© do usu√°rio correto e no canal correto
            return (
                message.author.id == setup_data["user_id"] and 
                message.channel.id == ctx.channel.id
            )
        
        try:
            # Aguarda a resposta do usu√°rio
            response = await self.bot.wait_for('message', check=check, timeout=timeout)
            
            # Verifica se o usu√°rio deseja cancelar
            if response.content.lower() == "cancelar":
                await ctx.send("‚ùå Configura√ß√£o cancelada pelo usu√°rio.")
                del self.active_setups[ctx.channel.id]
                return None
                
            return response
        except asyncio.TimeoutError:
            await ctx.send("‚è±Ô∏è Tempo esgotado. A configura√ß√£o foi cancelada.")
            del self.active_setups[ctx.channel.id]
            return None
    
    async def _finish_setup(self, ctx):
        """Finaliza o assistente de configura√ß√£o e aplica as configura√ß√µes"""
        setup_data = self.active_setups.get(ctx.channel.id)
        if not setup_data:
            return
            
        # Aplica todas as configura√ß√µes
        user_config = setup_data["config"]
        
        # Atualiza as configura√ß√µes no objeto config
        for key, value in user_config.items():
            self.config.set_config_value(key, value)
        
        # Cria um embed com o resumo das configura√ß√µes
        summary_embed = discord.Embed(
            title="‚úÖ Configura√ß√£o Conclu√≠da",
            description="As configura√ß√µes foram aplicadas com sucesso!",
            color=discord.Color.green()
        )
        
        # Adiciona cada configura√ß√£o ao resumo
        for key, value in user_config.items():
            # Formata o nome da configura√ß√£o para exibi√ß√£o
            display_name = key.replace("_", " ").title()
            
            # Formata o valor para exibi√ß√£o
            if isinstance(value, bool):
                display_value = "Ativado" if value else "Desativado"
            elif value == "":
                display_value = "N√£o definido"
            else:
                display_value = str(value)
                
            summary_embed.add_field(
                name=display_name,
                value=display_value,
                inline=True
            )
        
        # Adiciona instru√ß√µes para ajustes futuros
        prefix = self.config.get_prefix()
        summary_embed.add_field(
            name="üîÑ Ajustes Futuros",
            value=f"Para modificar configura√ß√µes espec√≠ficas, use `{prefix}config [par√¢metro] [valor]`.",
            inline=False
        )
        
        await ctx.send(embed=summary_embed)
        
        # Remove esta configura√ß√£o da lista de configura√ß√µes ativas
        del self.active_setups[ctx.channel.id]
    
    # Handlers para cada etapa de configura√ß√£o
    
    async def _setup_bot_name_keyword(self, ctx):
        """Configura o nome do bot e a palavra-chave"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        embed = discord.Embed(
            title="ü§ñ Nome do Bot e Palavra-Chave",
            description="Esta configura√ß√£o define como o bot ser√° chamado e a palavra-chave que ativar√° o bot.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Palavra-Chave",
            value="Digite a palavra-chave que ativar√° o bot (ex: 'bot', 'assistente')\nOu digite `pular` para usar apenas men√ß√µes.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta
        if response.content.lower() != "pular":
            setup_data["config"]["bot_keyword"] = response.content.lower()
            await ctx.send(f"‚úÖ Palavra-chave definida como: **{response.content}**")
        else:
            setup_data["config"]["bot_keyword"] = ""
            await ctx.send("‚ÑπÔ∏è O bot responder√° apenas a men√ß√µes.")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)
    
    async def _setup_command_prefix(self, ctx):
        """Configura o prefixo de comandos"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        current_prefix = self.config.get_prefix()
        embed = discord.Embed(
            title="‚å®Ô∏è Prefixo de Comandos",
            description=f"Esta configura√ß√£o define o s√≠mbolo usado antes dos comandos.\nO prefixo atual √©: **{current_prefix}**",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Novo Prefixo",
            value="Digite o novo prefixo para comandos (ex: '!', '/', '.')\nOu digite `pular` para manter o prefixo atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta
        if response.content.lower() != "pular":
            new_prefix = response.content
            setup_data["config"]["prefix"] = new_prefix
            await ctx.send(f"‚úÖ Prefixo definido como: **{new_prefix}**")
        else:
            await ctx.send(f"‚ÑπÔ∏è Mantendo o prefixo atual: **{current_prefix}**")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)
    
    async def _setup_memory_settings(self, ctx):
        """Configura as defini√ß√µes de mem√≥ria"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        current_limit = self.config.get_memory_limit()
        current_persistence = self.config.get_config_value("memory_persistence")
        
        embed = discord.Embed(
            title="üß† Mem√≥ria Permanente",
            description="Esta configura√ß√£o define como o bot armazena o hist√≥rico de conversas.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Limite de Mem√≥ria",
            value=f"Digite o n√∫mero de mensagens que o bot deve lembrar (atual: {current_limit})\nOu digite `pular` para manter o valor atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio para o limite de mem√≥ria
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta do limite de mem√≥ria
        if response.content.lower() != "pular":
            try:
                memory_limit = int(response.content)
                if memory_limit < 1:
                    await ctx.send("‚ö†Ô∏è O limite deve ser pelo menos 1. Definindo como 1.")
                    memory_limit = 1
                elif memory_limit > 100:
                    await ctx.send("‚ö†Ô∏è O limite n√£o pode exceder 100. Definindo como 100.")
                    memory_limit = 100
                    
                setup_data["config"]["memory_limit"] = memory_limit
                await ctx.send(f"‚úÖ Limite de mem√≥ria definido como: **{memory_limit}** mensagens")
            except ValueError:
                await ctx.send("‚ö†Ô∏è Valor inv√°lido. Mantendo o limite atual.")
                
        # Pergunta sobre a persist√™ncia de mem√≥ria
        embed = discord.Embed(
            title="üß† Mem√≥ria Permanente",
            description="A persist√™ncia de mem√≥ria permite que o bot lembre das conversas mesmo ap√≥s ser reiniciado.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Persist√™ncia",
            value=f"A persist√™ncia est√° atualmente **{'ativada' if current_persistence else 'desativada'}**\nDigite `ativar` ou `desativar` para alterar\nOu digite `pular` para manter o valor atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio para a persist√™ncia
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta da persist√™ncia
        if response.content.lower() != "pular":
            if response.content.lower() == "ativar":
                setup_data["config"]["memory_persistence"] = True
                await ctx.send("‚úÖ Persist√™ncia de mem√≥ria **ativada**")
            elif response.content.lower() == "desativar":
                setup_data["config"]["memory_persistence"] = False
                await ctx.send("‚úÖ Persist√™ncia de mem√≥ria **desativada**")
            else:
                await ctx.send("‚ö†Ô∏è Op√ß√£o inv√°lida. Mantendo a configura√ß√£o atual.")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)
    
    async def _setup_search_settings(self, ctx):
        """Configura o sistema de busca"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        current_search_enabled = self.config.get_config_value("search_enabled")
        
        embed = discord.Embed(
            title="üîç Sistema de Busca",
            description="Esta configura√ß√£o define como o bot realizar√° buscas na web.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Busca na Web",
            value=f"A busca na web est√° atualmente **{'ativada' if current_search_enabled else 'desativada'}**\nDigite `ativar` ou `desativar` para alterar\nOu digite `pular` para manter o valor atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio para ativar/desativar busca
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta da busca
        if response.content.lower() != "pular":
            if response.content.lower() == "ativar":
                setup_data["config"]["search_enabled"] = True
                await ctx.send("‚úÖ Busca na web **ativada**")
                
                # Pergunta sobre o modo de busca headless
                embed = discord.Embed(
                    title="üîç Modo de Busca Headless",
                    description="O modo headless permite realizar buscas sem APIs pagas, usando um navegador automatizado.",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üìù Motor de Busca Headless",
                    value="Digite `selenium` para usar o Selenium\nDigite `playwright` para usar o Playwright\nOu digite `pular` para usar o padr√£o (Selenium).",
                    inline=False
                )
                
                await ctx.send(embed=embed)
                
                # Aguarda a resposta do usu√°rio para o motor de busca
                response = await self._wait_for_response(ctx)
                if response is None:
                    return
                    
                # Processa a resposta do motor de busca
                if response.content.lower() != "pular":
                    if response.content.lower() == "playwright":
                        setup_data["config"]["use_playwright"] = True
                        await ctx.send("‚úÖ Motor de busca definido como: **Playwright**")
                    elif response.content.lower() == "selenium":
                        setup_data["config"]["use_playwright"] = False
                        await ctx.send("‚úÖ Motor de busca definido como: **Selenium**")
                    else:
                        await ctx.send("‚ö†Ô∏è Op√ß√£o inv√°lida. Usando o motor padr√£o (Selenium).")
                        setup_data["config"]["use_playwright"] = False
            elif response.content.lower() == "desativar":
                setup_data["config"]["search_enabled"] = False
                await ctx.send("‚úÖ Busca na web **desativada**")
            else:
                await ctx.send("‚ö†Ô∏è Op√ß√£o inv√°lida. Mantendo a configura√ß√£o atual.")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)
    
    async def _setup_moderation_settings(self, ctx):
        """Configura as defini√ß√µes de modera√ß√£o autom√°tica"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        current_moderation = self.config.get_config_value("moderation_enabled", False)
        
        embed = discord.Embed(
            title="üõ°Ô∏è Modera√ß√£o Autom√°tica",
            description="Esta configura√ß√£o define como o bot moderar√° mensagens automaticamente.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Modera√ß√£o Autom√°tica",
            value=f"A modera√ß√£o autom√°tica est√° atualmente **{'ativada' if current_moderation else 'desativada'}**\nDigite `ativar` ou `desativar` para alterar\nOu digite `pular` para manter o valor atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio para ativar/desativar modera√ß√£o
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta da modera√ß√£o
        if response.content.lower() != "pular":
            if response.content.lower() == "ativar":
                setup_data["config"]["moderation_enabled"] = True
                
                # Configura√ß√µes adicionais de modera√ß√£o
                embed = discord.Embed(
                    title="üõ°Ô∏è Op√ß√µes de Modera√ß√£o",
                    description="Selecione quais tipos de modera√ß√£o voc√™ deseja ativar.",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üìù Filtros Dispon√≠veis",
                    value="Digite os n√∫meros dos filtros que deseja ativar, separados por v√≠rgula:\n1. Anti-spam\n2. Anti-flood\n3. Filtro de palavras proibidas\nOu digite `todos` para ativar todos os filtros\nOu digite `pular` para n√£o ativar nenhum filtro.",
                    inline=False
                )
                
                await ctx.send(embed=embed)
                
                # Aguarda a resposta do usu√°rio para os filtros
                response = await self._wait_for_response(ctx)
                if response is None:
                    return
                    
                # Processa a resposta dos filtros
                if response.content.lower() != "pular":
                    if response.content.lower() == "todos":
                        setup_data["config"]["mod_antispam"] = True
                        setup_data["config"]["mod_antiflood"] = True
                        setup_data["config"]["mod_wordfilter"] = True
                        await ctx.send("‚úÖ Todos os filtros de modera√ß√£o foram **ativados**")
                    else:
                        # Processa os n√∫meros informados
                        try:
                            selected_filters = [int(f.strip()) for f in response.content.split(',')]
                            
                            # Configura cada filtro selecionado
                            if 1 in selected_filters:
                                setup_data["config"]["mod_antispam"] = True
                            if 2 in selected_filters:
                                setup_data["config"]["mod_antiflood"] = True
                            if 3 in selected_filters:
                                setup_data["config"]["mod_wordfilter"] = True
                                
                            await ctx.send("‚úÖ Filtros selecionados foram **ativados**")
                        except ValueError:
                            await ctx.send("‚ö†Ô∏è Formato inv√°lido. Nenhum filtro foi ativado.")
                
                # Se o filtro de palavras foi ativado, perguntar sobre palavras proibidas
                if setup_data["config"].get("mod_wordfilter", False):
                    embed = discord.Embed(
                        title="üî§ Palavras Proibidas",
                        description="Configure a lista de palavras que ser√£o filtradas pelo bot.",
                        color=discord.Color.blue()
                    )
                    embed.add_field(
                        name="üìù Lista de Palavras",
                        value="Digite as palavras proibidas separadas por v√≠rgula\nOu digite `pular` para usar a lista padr√£o.",
                        inline=False
                    )
                    
                    await ctx.send(embed=embed)
                    
                    # Aguarda a resposta do usu√°rio para as palavras proibidas
                    response = await self._wait_for_response(ctx)
                    if response is None:
                        return
                        
                    # Processa a resposta das palavras proibidas
                    if response.content.lower() != "pular":
                        banned_words = [word.strip().lower() for word in response.content.split(',')]
                        setup_data["config"]["banned_words"] = banned_words
                        await ctx.send(f"‚úÖ Lista de {len(banned_words)} palavras proibidas configurada")
                
            elif response.content.lower() == "desativar":
                setup_data["config"]["moderation_enabled"] = False
                await ctx.send("‚úÖ Modera√ß√£o autom√°tica **desativada**")
            else:
                await ctx.send("‚ö†Ô∏è Op√ß√£o inv√°lida. Mantendo a configura√ß√£o atual.")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)
    
    async def _setup_bot_personality(self, ctx):
        """Configura a personalidade do bot"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        current_personality = self.config.get_config_value("bot_personality", "assistente amig√°vel")
        
        embed = discord.Embed(
            title="üé≠ Personalidade do Bot",
            description="Esta configura√ß√£o define como o bot se comportar√° nas intera√ß√µes.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Personalidade",
            value="Escolha uma das personalidades abaixo:\n1. Formal e profissional\n2. Casual e amig√°vel\n3. Humor√≠stico e descontra√≠do\nOu digite uma personalidade personalizada\nOu digite `pular` para manter a personalidade atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio para a personalidade
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta da personalidade
        if response.content.lower() != "pular":
            if response.content == "1":
                setup_data["config"]["bot_personality"] = "formal e profissional"
                await ctx.send("‚úÖ Personalidade definida como: **Formal e profissional**")
            elif response.content == "2":
                setup_data["config"]["bot_personality"] = "casual e amig√°vel"
                await ctx.send("‚úÖ Personalidade definida como: **Casual e amig√°vel**")
            elif response.content == "3":
                setup_data["config"]["bot_personality"] = "humor√≠stico e descontra√≠do"
                await ctx.send("‚úÖ Personalidade definida como: **Humor√≠stico e descontra√≠do**")
            else:
                setup_data["config"]["bot_personality"] = response.content
                await ctx.send(f"‚úÖ Personalidade personalizada definida como: **{response.content}**")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)
    
    async def _setup_notification_settings(self, ctx):
        """Configura as notifica√ß√µes do bot"""
        setup_data = self.active_setups.get(ctx.channel.id)
        
        # Cria o embed para esta etapa
        current_notifications = self.config.get_config_value("notifications_enabled", False)
        
        embed = discord.Embed(
            title="üîî Notifica√ß√µes",
            description="Esta configura√ß√£o define como o bot enviar√° notifica√ß√µes sobre seu status.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìù Notifica√ß√µes",
            value=f"As notifica√ß√µes est√£o atualmente **{'ativadas' if current_notifications else 'desativadas'}**\nDigite `ativar` ou `desativar` para alterar\nOu digite `pular` para manter o valor atual.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        # Aguarda a resposta do usu√°rio para ativar/desativar notifica√ß√µes
        response = await self._wait_for_response(ctx)
        if response is None:
            return
            
        # Processa a resposta das notifica√ß√µes
        if response.content.lower() != "pular":
            if response.content.lower() == "ativar":
                setup_data["config"]["notifications_enabled"] = True
                
                # Pergunta sobre o m√©todo de notifica√ß√£o
                embed = discord.Embed(
                    title="üîî M√©todo de Notifica√ß√£o",
                    description="Escolha como o bot enviar√° notifica√ß√µes.",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üìù M√©todo",
                    value="Digite `telegram` para usar o Telegram\nDigite `webhook` para usar Webhook\nOu digite `pular` para usar o padr√£o (Webhook).",
                    inline=False
                )
                
                await ctx.send(embed=embed)
                
                # Aguarda a resposta do usu√°rio para o m√©todo de notifica√ß√£o
                response = await self._wait_for_response(ctx)
                if response is None:
                    return
                    
                # Processa a resposta do m√©todo de notifica√ß√£o
                if response.content.lower() != "pular":
                    if response.content.lower() == "telegram":
                        setup_data["config"]["notification_method"] = "telegram"
                        
                        # Pergunta sobre o token do bot do Telegram
                        embed = discord.Embed(
                            title="üîî Token do Telegram",
                            description="Configure o token do bot do Telegram para receber notifica√ß√µes.",
                            color=discord.Color.blue()
                        )
                        embed.add_field(
                            name="üìù Token",
                            value="Digite o token do seu bot do Telegram\nOu digite `pular` para configurar depois.",
                            inline=False
                        )
                        
                        await ctx.send(embed=embed)
                        
                        # Aguarda a resposta do usu√°rio para o token do Telegram
                        response = await self._wait_for_response(ctx)
                        if response is None:
                            return
                            
                        # Processa a resposta do token do Telegram
                        if response.content.lower() != "pular":
                            setup_data["config"]["telegram_token"] = response.content
                            await ctx.send("‚úÖ Token do Telegram configurado")
                            
                            # Pergunta sobre o chat ID do Telegram
                            embed = discord.Embed(
                                title="üîî Chat ID do Telegram",
                                description="Configure o ID do chat para onde as notifica√ß√µes ser√£o enviadas.",
                                color=discord.Color.blue()
                            )
                            embed.add_field(
                                name="üìù Chat ID",
                                value="Digite o ID do chat do Telegram\nOu digite `pular` para configurar depois.",
                                inline=False
                            )
                            
                            await ctx.send(embed=embed)
                            
                            # Aguarda a resposta do usu√°rio para o chat ID do Telegram
                            response = await self._wait_for_response(ctx)
                            if response is None:
                                return
                                
                            # Processa a resposta do chat ID do Telegram
                            if response.content.lower() != "pular":
                                setup_data["config"]["telegram_chat_id"] = response.content
                                await ctx.send("‚úÖ Chat ID do Telegram configurado")
                    
                    elif response.content.lower() == "webhook":
                        setup_data["config"]["notification_method"] = "webhook"
                        
                        # Pergunta sobre a URL do webhook
                        embed = discord.Embed(
                            title="üîî URL do Webhook",
                            description="Configure a URL do webhook para receber notifica√ß√µes.",
                            color=discord.Color.blue()
                        )
                        embed.add_field(
                            name="üìù URL",
                            value="Digite a URL completa do webhook\nOu digite `pular` para configurar depois.",
                            inline=False
                        )
                        
                        await ctx.send(embed=embed)
                        
                        # Aguarda a resposta do usu√°rio para a URL do webhook
                        response = await self._wait_for_response(ctx)
                        if response is None:
                            return
                            
                        # Processa a resposta da URL do webhook
                        if response.content.lower() != "pular":
                            setup_data["config"]["webhook_url"] = response.content
                            await ctx.send("‚úÖ URL do webhook configurada")
                    else:
                        await ctx.send("‚ö†Ô∏è Op√ß√£o inv√°lida. Usando o m√©todo padr√£o (Webhook).")
                        setup_data["config"]["notification_method"] = "webhook"
                else:
                    setup_data["config"]["notification_method"] = "webhook"
                    
            elif response.content.lower() == "desativar":
                setup_data["config"]["notifications_enabled"] = False
                await ctx.send("‚úÖ Notifica√ß√µes **desativadas**")
            else:
                await ctx.send("‚ö†Ô∏è Op√ß√£o inv√°lida. Mantendo a configura√ß√£o atual.")
        
        # Avan√ßa para a pr√≥xima etapa
        setup_data["step"] += 1
        await self._process_next_step(ctx)